"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WrapperKeepOpaque = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Raw = require("../native/Raw.cjs");

var _index = require("../utils/index.cjs");

var _Bytes = require("./Bytes.cjs");

// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0
function decodeRaw(registry, typeName, value) {
  const Type = (0, _index.typeToConstructor)(registry, typeName);

  if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) {
    try {
      const [, u8a] = (0, _util.isHex)(value) || value instanceof _Raw.Raw ? [0, value] : (0, _util.compactStripLength)(value);
      return [Type, new Type(registry, u8a), value];
    } catch {
      return [Type, null, value];
    }
  }

  const instance = new Type(registry, value);
  return [Type, instance, instance.toHex()];
}

var _Type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Type");

var _decoded = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("decoded");

class WrapperKeepOpaque extends _Bytes.Bytes {
  constructor(registry, typeName, value) {
    const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
    super(registry, u8a);
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _decoded, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = Type;
    (0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded] = decoded;
  }

  static with(Type) {
    return class extends WrapperKeepOpaque {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description Checks if the wrapper is decodable
   */


  get isDecoded() {
    return !!(0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded] ? (0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded].toHuman(isExtended) : super.toHuman();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `WrapperKeepOpaque<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || ((0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded] ? (0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded].toRawType() : new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry).toRawType())}>`;
  }
  /**
   * @description Converts the Object to to a string (either decoded or bytes)
   */


  toString() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded] ? (0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded].toString() : super.toString();
  }
  /**
   * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
   */


  unwrap() {
    return (0, _util.assertReturn)((0, _classPrivateFieldLooseBase2.default)(this, _decoded)[_decoded], 'WrapperKeepOpaque: unwrapping an undecodable value');
  }

}

exports.WrapperKeepOpaque = WrapperKeepOpaque;