import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { assertReturn, compactStripLength, isHex, isU8a } from '@polkadot/util';
import { Raw } from "../native/Raw.js";
import { typeToConstructor } from "../utils/index.js";
import { Bytes } from "./Bytes.js";

function decodeRaw(registry, typeName, value) {
  const Type = typeToConstructor(registry, typeName);

  if (isU8a(value) || isHex(value)) {
    try {
      const [, u8a] = isHex(value) || value instanceof Raw ? [0, value] : compactStripLength(value);
      return [Type, new Type(registry, u8a), value];
    } catch {
      return [Type, null, value];
    }
  }

  const instance = new Type(registry, value);
  return [Type, instance, instance.toHex()];
}

var _Type = /*#__PURE__*/_classPrivateFieldLooseKey("Type");

var _decoded = /*#__PURE__*/_classPrivateFieldLooseKey("decoded");

export class WrapperKeepOpaque extends Bytes {
  constructor(registry, typeName, value) {
    const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
    super(registry, u8a);
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _decoded, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldLooseBase(this, _Type)[_Type] = Type;
    _classPrivateFieldLooseBase(this, _decoded)[_decoded] = decoded;
  }

  static with(Type) {
    return class extends WrapperKeepOpaque {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description Checks if the wrapper is decodable
   */


  get isDecoded() {
    return !!_classPrivateFieldLooseBase(this, _decoded)[_decoded];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return _classPrivateFieldLooseBase(this, _decoded)[_decoded] ? _classPrivateFieldLooseBase(this, _decoded)[_decoded].toHuman(isExtended) : super.toHuman();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `WrapperKeepOpaque<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _Type)[_Type]) || (_classPrivateFieldLooseBase(this, _decoded)[_decoded] ? _classPrivateFieldLooseBase(this, _decoded)[_decoded].toRawType() : new (_classPrivateFieldLooseBase(this, _Type)[_Type])(this.registry).toRawType())}>`;
  }
  /**
   * @description Converts the Object to to a string (either decoded or bytes)
   */


  toString() {
    return _classPrivateFieldLooseBase(this, _decoded)[_decoded] ? _classPrivateFieldLooseBase(this, _decoded)[_decoded].toString() : super.toString();
  }
  /**
   * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
   */


  unwrap() {
    return assertReturn(_classPrivateFieldLooseBase(this, _decoded)[_decoded], 'WrapperKeepOpaque: unwrapping an undecodable value');
  }

}